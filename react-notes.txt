One way data flow

Pure functions (Deterministic) - receives an input and always return an (same) output

React Components are called pure components, others say it is dumb component

STATE >> props

PROPS 
    - props are something we get and unable to modify
    - unable to change

STATE 
    - simply means, the description of an app
    - simple and object, object that describes an application
    - able to change
    - something that can change and affect our app and usually lives in the 
        parent components, wherein it passes that state(props) to different 
        components
    - use this.setState() to change a state property
        ex. this.setState({ searchField: event.target.value });

CHILDREN - Every props has children, this can be used to get what is wrapped
    inside the other component (ex Scoll Component)

Life Cycle Methods (Life Cycle Hooks)
    - https://reactjs.org/docs/react-component.html
        - Mounting
            - constructor() 
            - componentWillMount() - before render
            - render()
            - componentDidMount() - after render
        - Updating
        - Unmounting
    - https://reactjs.org/docs/state-and-lifecycle.html 


Inline Styles 
    In JSX, to use style attribute, it must be in double {{}}
    ex. <div style={{}}></div> so it can accept and object of css Styles

NPM React Scripts
- npm run build
    - will create a build folder (for deployment) which contains minified/compiled
     styles, scripts, etc. (made by webpack) for better perfomance

    example build notes after successful build
       
        The project was built assuming it is hosted at the server root.
        You can control this with the homepage field in your package.json.
        For example, add this to build it for GitHub Pages:

        "homepage" : "http://myname.github.io/myapp",

        The build folder is ready to be deployed.
        You may serve it with a static server:

        npm install -g serve
        serve -s build

        Find out more about deployment here:

        https://bit.ly/CRA-deploy

Error Boundary
- Added in Version 16 and higher of React.JS
- Note: error will still be deisplayed in development mode, but will be hidden when 
build is in production
- componentDidCatch - new lifecycle hook

REDUX
- State Management
- Installed redux package
- And, in order to connect redux just like react using ReactDOM package
    to connect with the DOM, install react-redux package

Syntax of using connect in a Smart Component (container)
is by using Higher Order function, meaning it is invoked/called
then return another function then the function get called too.
example: 
export default conect()(App);


Reference: Lesson 61

Since React is for View only, here are some tools that can be used and added on top of react

Libraries: 
- React Router (changing pages, changing routes)
    https://reactrouter.com/
    
Utility Librarys (Added functions to JavaScript)
- Ramda 
    - if you want to keep functional programming ideology
    https://ramdajs.com/ 
- Lodash 
    - Extra tools that can be used in JS
    https://lodash.com/ 

For Styling 
- Glamorous (Maintainable CSS with React)
    https://glamorous.rocks/
- Styled Components 
    https://styled-components.com/ 
- CSS Modules
    https://github.com/css-modules/css-modules


Gatsby.js (For Static Websites in React)
    https://www.gatsbyjs.com/

Next.js (for server-side rendered apps)
    https://nextjs.org/

Material UI (components for react, ready to copy)
    https://material-ui.com/

React Semantic UI (component for react, ready to copy)
    https://react.semantic-ui.com/ 

Reselect (Usually partnered with Redux. Selector)
    https://github.com/reduxjs/reselect

Redux Saga
    https://redux-saga.js.org/

Immutable JS 
    https://immutable-js.github.io/immutable-js/


Reference: Lesson 62
Module Bundlers
- Parcel 
    - Personal Projects
    - https://parceljs.org/ 
- Webpack 
    - For Big Projects
    - https://webpack.js.org/ 
- Rollup.js
    - When rolling up own npm packages
    - https://rollupjs.org/guide/en/